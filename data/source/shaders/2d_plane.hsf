

#include "engine/std.glsl"
#include "engine/random.glsl"

// raymarcher defines
layout(constant_id = hydra::id(max_steps)) const int k_max_steps = 12;
layout(constant_id = hydra::id(inside_step_distance)) const float k_inside_step_distance = 0.35f;


// in/out:
// vert:
hydra::layout(vert(in), location = 0) vec2 vertex_in_position;
hydra::layout(vert(in), location = 1) vec3 vertex_in_color;
hydra::layout(vert(in), location = 2) vec2 vertex_in_uv;

hydra::layout(vert(out), location = 0) vec2 out_vertex_pos;
hydra::layout(vert(out), location = 1) vec2 out_vertex_uv;

// frag:
hydra::layout(frag(in), location = 0) vec2 in_vertex_pos;
hydra::layout(frag(in), location = 1) vec2 in_vertex_uv;

hydra::layout(frag(out), location = 0) vec4 frag_out_color;


layout(binding = 0) uniform sampler2D tex_sampler;
layout(std140, binding = 1) uniform ubo_t
{
  float time;
  vec2 screen_resolution;
} ubo;


#glsl:if hydra::is_stage(vert, frag)
#glsl:endif

hydra::entry_point(main_vs, vert)
hydra::entry_point(main_fs, frag)


void main_vs()
{
  gl_Position = vec4(vertex_in_position, 0.0, 1.0);

  out_vertex_pos = vertex_in_position;
  out_vertex_uv = vertex_in_uv;
}



void main_fs()
{
  vec2 tuv = in_vertex_uv;
  float ratio = ubo.screen_resolution.x / ubo.screen_resolution.y;
  // center horizontaly:
  tuv.x *= ratio;
  tuv.x -= max(0,ratio-1) / 2;

  // don't center vertically
  tuv.y += 0.25;

  vec4 tex = texture(tex_sampler, tuv);

  float color = 0;
  if (tex.a < 0.5)
  {
    const float k_scale = 0.1;
    const float time_scale = (1 + sin(ubo.time * 0.5 + 2 * 3.1415 * to_snorm(rnd_seed(asuint(tuv))) ));
    uint2 base_seed = uint2(abs(tuv) * 300 + 9928000 + (time_scale + 0.75) * to_unorm(rnd_split2(rnd_seed(asuint(tuv)))));
    uint seed = rnd_seed((base_seed.x ^ base_seed.y) * 200);
    const float2 hdir = to_hnorm(invwk_rnd2(seed));

    for (uint i = 0; i < 20; ++i)
    {
      const float len = (0.05 + pow5(to_snorm(invwk_rnd(seed))));
      const float2 dir = hdir * len;
      color += texture(tex_sampler, saturate(tuv + dir * k_scale)).a;
    }
    color /= 15;
  }

  frag_out_color = vec4(color.rrr, 1.0);

//   out_color.rgb = out_color.rgb * (1. - tex.a) + tex.a * vec3(1.);
//   frag_out_color.rgb = mix(frag_out_color.rgb, pow(frag_out_color.rgb, (1./3.).xxx), tex.a);
//   out_color.a = tex.a;

}
